rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate collection data
    function isValidCollection() {
      let data = request.resource.data;
      return 
        // Required fields exist and have correct types
        data.name is string &&
        data.name.size() > 0 &&
        data.name.size() <= 100 &&
        data.description is string &&
        data.description.size() <= 500 &&
        data.visibility in ['public', 'private'] &&
        data.userId is string &&
        data.flashcards is list &&
        data.flashcards.size() > 0 &&
        data.flashcards.size() <= 1000 &&
        // Validate each flashcard
        data.flashcards.hasAll([
          'front',
          'back'
        ]) &&
        // Timestamps exist
        data.createdAt is timestamp &&
        data.updatedAt is timestamp;
    }

    // Helper function to validate flashcard data
    function isValidFlashcard(flashcard) {
      return 
        flashcard.front is string &&
        flashcard.front.size() > 0 &&
        flashcard.front.size() <= 1000 &&
        flashcard.back is string &&
        flashcard.back.size() > 0 &&
        flashcard.back.size() <= 1000;
    }

    match /collections/{collectionId} {
      // Allow reading if:
      // 1. The collection is public, or
      // 2. The user owns the collection
      allow read: if 
        resource.data.visibility == 'public' ||
        isOwner(resource.data.userId);

      // Allow creation if:
      // 1. User is authenticated
      // 2. The userId in the document matches the authenticated user
      // 3. The data is valid
      allow create: if
        isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        isValidCollection();

      // Allow updates if:
      // 1. User owns the collection
      // 2. The userId isn't being changed
      // 3. The updated data is valid
      allow update: if
        isOwner(resource.data.userId) &&
        request.resource.data.userId == resource.data.userId &&
        isValidCollection();

      // Allow deletion if user owns the collection
      allow delete: if isOwner(resource.data.userId);
    }
  }
}